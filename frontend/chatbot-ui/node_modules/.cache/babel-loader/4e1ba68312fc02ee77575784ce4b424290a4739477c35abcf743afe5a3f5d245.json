{"ast":null,"code":"import React,{useState,useEffect,useRef}from\"react\";import{Card,CardContent,TextField,Button,Typography}from\"@mui/material\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Chatbot=()=>{const[messages,setMessages]=useState([]);const[input,setInput]=useState(\"\");const chatBoxRef=useRef(null);useEffect(()=>{if(chatBoxRef.current){chatBoxRef.current.scrollTop=chatBoxRef.current.scrollHeight;}},[messages]);const sendMessage=async()=>{if(!input.trim())return;const userMessage={text:input,sender:\"user\"};setMessages(prevMessages=>[...prevMessages,userMessage]);setInput(\"\");// Clears input immediately after sending\ntry{const response=await fetch(\"http://127.0.0.1:5000/chat\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({session_id:\"user1\",query:input})});const data=await response.json();const botMessage={text:data.response,sender:\"bot\"};setMessages(prevMessages=>[...prevMessages,botMessage]);}catch(error){console.error(\"Error:\",error);setMessages(prevMessages=>[...prevMessages,{text:\"Error occurred\",sender:\"bot\"}]);}};return/*#__PURE__*/_jsx(Card,{sx:{maxWidth:400,margin:\"auto\",mt:5,boxShadow:3},children:/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",align:\"center\",children:\"Chatbot\"}),/*#__PURE__*/_jsx(\"div\",{ref:chatBoxRef,style:{height:300,overflowY:\"auto\",marginBottom:10,display:\"flex\",flexDirection:\"column\"},children:messages.map((msg,index)=>/*#__PURE__*/_jsx(\"div\",{style:{display:\"flex\",justifyContent:msg.sender===\"user\"?\"flex-end\":\"flex-start\",marginBottom:\"10px\"},children:/*#__PURE__*/_jsx(Typography,{sx:{backgroundColor:msg.sender===\"user\"?\"#007bff\":\"#f1f1f1\",color:msg.sender===\"user\"?\"white\":\"black\",padding:\"10px\",borderRadius:\"15px\",maxWidth:\"75%\",wordWrap:\"break-word\",textAlign:\"left\",lineHeight:\"1.4\"},children:msg.text})},index))}),/*#__PURE__*/_jsx(TextField,{fullWidth:true,variant:\"outlined\",placeholder:\"Type a message...\",value:input,onChange:e=>setInput(e.target.value),onKeyDown:e=>e.key===\"Enter\"&&sendMessage()}),/*#__PURE__*/_jsx(Button,{fullWidth:true,variant:\"contained\",color:\"primary\",onClick:sendMessage,sx:{mt:2},children:\"Send\"})]})});};export default Chatbot;","map":{"version":3,"names":["React","useState","useEffect","useRef","Card","CardContent","TextField","Button","Typography","jsx","_jsx","jsxs","_jsxs","Chatbot","messages","setMessages","input","setInput","chatBoxRef","current","scrollTop","scrollHeight","sendMessage","trim","userMessage","text","sender","prevMessages","response","fetch","method","headers","body","JSON","stringify","session_id","query","data","json","botMessage","error","console","sx","maxWidth","margin","mt","boxShadow","children","variant","align","ref","style","height","overflowY","marginBottom","display","flexDirection","map","msg","index","justifyContent","backgroundColor","color","padding","borderRadius","wordWrap","textAlign","lineHeight","fullWidth","placeholder","value","onChange","e","target","onKeyDown","key","onClick"],"sources":["/Users/omerfaruk/ChatBot_v1/frontend/chatbot-ui/src/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Card, CardContent, TextField, Button, Typography } from \"@mui/material\";\n\nconst Chatbot = () => {\n    const [messages, setMessages] = useState([]);\n    const [input, setInput] = useState(\"\");\n    const chatBoxRef = useRef(null);\n\n     useEffect(() => {\n        if (chatBoxRef.current) {\n            chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;\n        }\n    }, [messages]);\n\n    const sendMessage = async () => {\n        if (!input.trim()) return;\n    \n        const userMessage = { text: input, sender: \"user\" };\n        setMessages((prevMessages) => [...prevMessages, userMessage]);\n        setInput(\"\"); // Clears input immediately after sending\n    \n        try {\n            const response = await fetch(\"http://127.0.0.1:5000/chat\", {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({ session_id: \"user1\", query: input })\n            });\n\n            const data = await response.json();\n            const botMessage = { text: data.response, sender: \"bot\" };\n            setMessages((prevMessages) => [...prevMessages, botMessage]);\n        } catch (error) {\n            console.error(\"Error:\", error);\n            setMessages((prevMessages) => [...prevMessages, { text: \"Error occurred\", sender: \"bot\" }]);\n\n        }\n        \n    };\n    \n\n    return (\n        <Card sx={{ maxWidth: 400, margin: \"auto\", mt: 5, boxShadow: 3 }}>\n            <CardContent>\n                <Typography variant=\"h6\" align=\"center\">Chatbot</Typography>\n                <div ref={chatBoxRef} style={{ height: 300, overflowY: \"auto\", marginBottom: 10, display: \"flex\", flexDirection: \"column\" }}>\n                    {messages.map((msg, index) => (\n                        <div key={index} style={{\n                            display: \"flex\",\n                            justifyContent: msg.sender === \"user\" ? \"flex-end\" : \"flex-start\",\n                            marginBottom: \"10px\"\n                        }}>\n                            <Typography sx={{\n                                backgroundColor: msg.sender === \"user\" ? \"#007bff\" : \"#f1f1f1\",\n                                color: msg.sender === \"user\" ? \"white\" : \"black\",\n                                padding: \"10px\",\n                                borderRadius: \"15px\",\n                                maxWidth: \"75%\",\n                                wordWrap: \"break-word\",\n                                textAlign: \"left\",\n                                lineHeight: \"1.4\"\n                            }}>\n                                {msg.text}\n                            </Typography>\n                        </div>\n                    ))}\n                </div>\n                <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    placeholder=\"Type a message...\"\n                    value={input}\n                    onChange={(e) => setInput(e.target.value)}\n                    onKeyDown={(e) => e.key === \"Enter\" && sendMessage()}\n                />\n                <Button fullWidth variant=\"contained\" color=\"primary\" onClick={sendMessage} sx={{ mt: 2 }}>\n                    Send\n                </Button>\n            </CardContent>\n        </Card>\n    );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}