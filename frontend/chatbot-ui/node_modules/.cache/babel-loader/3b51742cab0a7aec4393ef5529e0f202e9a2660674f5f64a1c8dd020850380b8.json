{"ast":null,"code":"var _jsxFileName = \"/Users/omerfaruk/ChatBot_v1/frontend/chatbot-ui/src/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Card, CardContent, TextField, Button, Typography } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const chatBoxRef = useRef(null);\n  useEffect(() => {\n    if (chatBoxRef.current) {\n      chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;\n    }\n  }, [messages]);\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    setMessages([...messages, {\n      text: input,\n      sender: \"user\"\n    }]);\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          session_id: \"user1\",\n          query: input\n        })\n      });\n      const data = await response.json();\n      setMessages([...messages, {\n        text: input,\n        sender: \"user\"\n      }, {\n        text: data.response,\n        sender: \"bot\"\n      }]);\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setMessages([...messages, {\n        text: \"Error occurred\",\n        sender: \"bot\"\n      }]);\n    }\n\n    //setInput(\"\");\n    const userMessage = {\n      text: input,\n      sender: \"user\"\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setInput(\"\"); // Clears input immediately after sending\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      maxWidth: 400,\n      margin: \"auto\",\n      mt: 5,\n      boxShadow: 3\n    },\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        align: \"center\",\n        children: \"Chatbot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: chatBoxRef,\n        style: {\n          height: 300,\n          overflowY: \"auto\",\n          marginBottom: 10\n        },\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            textAlign: msg.sender === \"user\" ? \"right\" : \"left\",\n            backgroundColor: msg.sender === \"user\" ? \"#007bff\" : \"#f1f1f1\",\n            color: msg.sender === \"user\" ? \"white\" : \"black\",\n            padding: \"8px\",\n            borderRadius: \"10px\",\n            margin: \"5px 0\",\n            display: \"inline-block\",\n            maxWidth: \"80%\"\n          },\n          children: msg.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        variant: \"outlined\",\n        placeholder: \"Type a message...\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyDown: e => e.key === \"Enter\" && sendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        fullWidth: true,\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: sendMessage,\n        sx: {\n          mt: 2\n        },\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"Ekci+Ezk3nhRZPOD2Y68v7/O5vs=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Card","CardContent","TextField","Button","Typography","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","chatBoxRef","current","scrollTop","scrollHeight","sendMessage","trim","text","sender","response","fetch","method","headers","body","JSON","stringify","session_id","query","data","json","error","console","userMessage","prevMessages","sx","maxWidth","margin","mt","boxShadow","children","variant","align","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","height","overflowY","marginBottom","map","msg","index","textAlign","backgroundColor","color","padding","borderRadius","display","fullWidth","placeholder","value","onChange","e","target","onKeyDown","key","onClick","_c","$RefreshReg$"],"sources":["/Users/omerfaruk/ChatBot_v1/frontend/chatbot-ui/src/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Card, CardContent, TextField, Button, Typography } from \"@mui/material\";\n\nconst Chatbot = () => {\n    const [messages, setMessages] = useState([]);\n    const [input, setInput] = useState(\"\");\n    const chatBoxRef = useRef(null);\n\n     useEffect(() => {\n        if (chatBoxRef.current) {\n            chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;\n        }\n    }, [messages]);\n\n    const sendMessage = async () => {\n        if (!input.trim()) return;\n    \n        setMessages([...messages, { text: input, sender: \"user\" }]);\n    \n        try {\n            const response = await fetch(\"http://127.0.0.1:5000/chat\", {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({ session_id: \"user1\", query: input })\n            });\n    \n            const data = await response.json();\n            setMessages([...messages, { text: input, sender: \"user\" }, { text: data.response, sender: \"bot\" }]);\n        } catch (error) {\n            console.error(\"Error:\", error);\n            setMessages([...messages, { text: \"Error occurred\", sender: \"bot\" }]);\n        }\n    \n        //setInput(\"\");\n        const userMessage = { text: input, sender: \"user\" };\n        setMessages((prevMessages) => [...prevMessages, userMessage]);\n        setInput(\"\"); // Clears input immediately after sending\n    };\n    \n\n    return (\n        <Card sx={{ maxWidth: 400, margin: \"auto\", mt: 5, boxShadow: 3 }}>\n            <CardContent>\n                <Typography variant=\"h6\" align=\"center\">Chatbot</Typography>\n                <div ref={chatBoxRef} style={{ height: 300, overflowY: \"auto\", marginBottom: 10 }}>\n                    {messages.map((msg, index) => (\n                        <Typography key={index} sx={{\n                            textAlign: msg.sender === \"user\" ? \"right\" : \"left\",\n                            backgroundColor: msg.sender === \"user\" ? \"#007bff\" : \"#f1f1f1\",\n                            color: msg.sender === \"user\" ? \"white\" : \"black\",\n                            padding: \"8px\",\n                            borderRadius: \"10px\",\n                            margin: \"5px 0\",\n                            display: \"inline-block\",\n                            maxWidth: \"80%\"\n                        }}>\n                            {msg.text}\n                        </Typography>\n                    ))}\n                </div>\n                <TextField\n                    fullWidth\n                    variant=\"outlined\"\n                    placeholder=\"Type a message...\"\n                    value={input}\n                    onChange={(e) => setInput(e.target.value)}\n                    onKeyDown={(e) => e.key === \"Enter\" && sendMessage()}\n                />\n                <Button fullWidth variant=\"contained\" color=\"primary\" onClick={sendMessage} sx={{ mt: 2 }}>\n                    Send\n                </Button>\n            </CardContent>\n        </Card>\n    );\n};\n\nexport default Chatbot;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,IAAI,EAAEC,WAAW,EAAEC,SAAS,EAAEC,MAAM,EAAEC,UAAU,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjF,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMgB,UAAU,GAAGd,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACb,IAAIe,UAAU,CAACC,OAAO,EAAE;MACpBD,UAAU,CAACC,OAAO,CAACC,SAAS,GAAGF,UAAU,CAACC,OAAO,CAACE,YAAY;IAClE;EACJ,CAAC,EAAE,CAACP,QAAQ,CAAC,CAAC;EAEd,MAAMQ,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI,CAACN,KAAK,CAACO,IAAI,CAAC,CAAC,EAAE;IAEnBR,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE;MAAEU,IAAI,EAAER,KAAK;MAAES,MAAM,EAAE;IAAO,CAAC,CAAC,CAAC;IAE3D,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,EAAE;QACvDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,UAAU,EAAE,OAAO;UAAEC,KAAK,EAAElB;QAAM,CAAC;MAC9D,CAAC,CAAC;MAEF,MAAMmB,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClCrB,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE;QAAEU,IAAI,EAAER,KAAK;QAAES,MAAM,EAAE;MAAO,CAAC,EAAE;QAAED,IAAI,EAAEW,IAAI,CAACT,QAAQ;QAAED,MAAM,EAAE;MAAM,CAAC,CAAC,CAAC;IACvG,CAAC,CAAC,OAAOY,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9BtB,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE;QAAEU,IAAI,EAAE,gBAAgB;QAAEC,MAAM,EAAE;MAAM,CAAC,CAAC,CAAC;IACzE;;IAEA;IACA,MAAMc,WAAW,GAAG;MAAEf,IAAI,EAAER,KAAK;MAAES,MAAM,EAAE;IAAO,CAAC;IACnDV,WAAW,CAAEyB,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAED,WAAW,CAAC,CAAC;IAC7DtB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAClB,CAAC;EAGD,oBACIN,OAAA,CAACN,IAAI;IAACoC,EAAE,EAAE;MAAEC,QAAQ,EAAE,GAAG;MAAEC,MAAM,EAAE,MAAM;MAAEC,EAAE,EAAE,CAAC;MAAEC,SAAS,EAAE;IAAE,CAAE;IAAAC,QAAA,eAC7DnC,OAAA,CAACL,WAAW;MAAAwC,QAAA,gBACRnC,OAAA,CAACF,UAAU;QAACsC,OAAO,EAAC,IAAI;QAACC,KAAK,EAAC,QAAQ;QAAAF,QAAA,EAAC;MAAO;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eAC5DzC,OAAA;QAAK0C,GAAG,EAAEnC,UAAW;QAACoC,KAAK,EAAE;UAAEC,MAAM,EAAE,GAAG;UAAEC,SAAS,EAAE,MAAM;UAAEC,YAAY,EAAE;QAAG,CAAE;QAAAX,QAAA,EAC7EhC,QAAQ,CAAC4C,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACrBjD,OAAA,CAACF,UAAU;UAAagC,EAAE,EAAE;YACxBoB,SAAS,EAAEF,GAAG,CAAClC,MAAM,KAAK,MAAM,GAAG,OAAO,GAAG,MAAM;YACnDqC,eAAe,EAAEH,GAAG,CAAClC,MAAM,KAAK,MAAM,GAAG,SAAS,GAAG,SAAS;YAC9DsC,KAAK,EAAEJ,GAAG,CAAClC,MAAM,KAAK,MAAM,GAAG,OAAO,GAAG,OAAO;YAChDuC,OAAO,EAAE,KAAK;YACdC,YAAY,EAAE,MAAM;YACpBtB,MAAM,EAAE,OAAO;YACfuB,OAAO,EAAE,cAAc;YACvBxB,QAAQ,EAAE;UACd,CAAE;UAAAI,QAAA,EACGa,GAAG,CAACnC;QAAI,GAVIoC,KAAK;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAWV,CACf;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eACNzC,OAAA,CAACJ,SAAS;QACN4D,SAAS;QACTpB,OAAO,EAAC,UAAU;QAClBqB,WAAW,EAAC,mBAAmB;QAC/BC,KAAK,EAAErD,KAAM;QACbsD,QAAQ,EAAGC,CAAC,IAAKtD,QAAQ,CAACsD,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC1CI,SAAS,EAAGF,CAAC,IAAKA,CAAC,CAACG,GAAG,KAAK,OAAO,IAAIpD,WAAW,CAAC;MAAE;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxD,CAAC,eACFzC,OAAA,CAACH,MAAM;QAAC2D,SAAS;QAACpB,OAAO,EAAC,WAAW;QAACgB,KAAK,EAAC,SAAS;QAACY,OAAO,EAAErD,WAAY;QAACmB,EAAE,EAAE;UAAEG,EAAE,EAAE;QAAE,CAAE;QAAAE,QAAA,EAAC;MAE3F;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACZ,CAAC;AAEf,CAAC;AAACvC,EAAA,CAvEID,OAAO;AAAAgE,EAAA,GAAPhE,OAAO;AAyEb,eAAeA,OAAO;AAAC,IAAAgE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}